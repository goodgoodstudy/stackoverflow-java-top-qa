##为什么以下两个日期相减（在1927年）会得到一个奇怪的结果？

###问题
我尝试运行下面的程序，把两个相隔一秒的表示日期的字符串转化为秒并比较它们：
```java
public static void main(String[] args) throws ParseException {
    SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
    String str3 = "1927-12-31 23:54:07";  
    String str4 = "1927-12-31 23:54:08";  
    Date sDt3 = sf.parse(str3);  
    Date sDt4 = sf.parse(str4);  
    long ld3 = sDt3.getTime() /1000;  
    long ld4 = sDt4.getTime() /1000;
    System.out.println(ld4-ld3);
}
```
输出是：
353

为什么 ld4-ld3 不等于1（我认为这两个时间只有一秒的间隔）而是353？
如果我改变这两个日期到一秒后：
```java
String str3 = "1927-12-31 23:54:08";  
String str4 = "1927-12-31 23:54:09";  
```
ld4-ld3 就等于1了。

java版本：
java version "1.6.0_22"
Java(TM) SE Runtime Environment (build 1.6.0_22-b04)
Dynamic Code Evolution Client VM (build 0.2-b02-internal, 19.0-b04-internal, mixed mode)

时区(TimeZone.getDefault()):
sun.util.calendar.ZoneInfo[id="Asia/Shanghai",
offset=28800000,dstSavings=0,
useDaylight=false,
transitions=19,
lastRule=null]

Locale(Locale.getDefault()): zh_CN

###回答
这是个时区改变问题发生在12月31号的上海
看这个页面查看关于1927年上海的详情（http://www.timeanddate.com/time/change/china/shanghai?year=1927）。其实在1927年最后一天的午夜，钟倒退了5分钟52秒。所以“1927-12-31 23：54：08”实际上发生了两次，貌似java当作了后面一次的时间来解析所以会有差异

这只是关于时区的又一个奇妙而常见的插曲

编辑：按下停止按钮！历史改变了...

这个问题如果用TZDB（https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68）2013a的版本去重新构建将会出现不同的结果。在2013a版本中结果会是358秒，时间23:54:08将会变成23:54:03

我在对Noda Time进行单元测试的时候注意到这个问题，这个测试已经改变了，但是它显示了即使是历史数据也不是绝对正确的。

编辑：历史再次改变了...

在TZDB2014f，时间的变化移动到了1900-12-31，这次只有343秒的改变（所以这次t和t+1的间隔是344秒，如果你明白我的意思的话）

编辑：要回答Ken Kin的关于1900年时间改变的问题...恐怕是java直接把所有的时区简单的定义在1900Utc之前的标准时间
